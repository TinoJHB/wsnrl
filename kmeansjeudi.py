import numpy as np
from sklearn.cluster import KMeans

from sklearn.metrics import silhouette_score

class ElbowMethodKMeans:
    def __init__(self, max_clusters, max_iterations, final_model):
        self.max_clusters = max_clusters
        self.max_iterations = max_iterations
        self.final_model = final_model

    def fit(self, X):
        # Extract values from the dictionary
        data = list(X)

        # Convert the list to a NumPy array
        data_array = np.array(data)

        # Compute silhouette scores for each cluster size k
        silhouette_scores = []
        for k in range(2, self.max_clusters + 1):
            km_model = KMeans(n_clusters=k, max_iter=self.max_iterations, n_init=10)
            km_model.fit(data_array)
            silhouette_scores.append(silhouette_score(data_array, km_model.labels_))

        # Determine optimal number of clusters using silhouette scores
        opt_k = np.argmax(silhouette_scores) + 2
        # Create final model with optimal value of k and fit it to data
        final_model = KMeans(n_clusters=opt_k, max_iter=self.max_iterations)
        final_model.fit(data_array)

        # Assign the final KMeans model to the instance variable
        self.final_model = final_model

        # Return the labels generated by the final KMeans model
        return final_model.labels_

    def predict(self, X):
        # Extract values from the dictionary
        data = list(X)

        # Convert the list to a NumPy array
        data_array = np.array(data)

        return self.final_model.predict(data_array)

# initialize kmeans object


kmeans = ElbowMethodKMeans(max_clusters=10, max_iterations=100, final_model=None)
